#!/usr/bin/ruby
########################################################################
#
# Author: Brian Hood
#
# Description: Threatmonitor HTTP Viz
#
# Analyze HTTP Traffic using Traffic Visualizer
#
########################################################################

require 'pcaplet'
require 'getoptlong'
require 'keycounter'
require 'guid'

require File.expand_path(File.join(
          File.dirname(__FILE__),
          "../lib/thm.rb"))

conf = Thm::FileServices.new
conf.thmhome?

include Thm::Defaults

class Keycounter

  def keycount_createtablethm
    fieldlst = Array.new
    if File.exists?("/tmp/thmreadtable.txt")
      File.open("/tmp/thmreadtable.txt", 'r') {|n|
        n.each_line {|l|
          fieldlst << ["#{l}"]
        }
      }
    end
    sql = "CREATE TABLE http_request (\n"
    sql << "guid char(36),\n"
    instance_variables.each {|n|
      t = n.to_s.gsub("@", "")
      fieldlst << ["#{t}"]
    }
    fieldlst.each {|n|
      sql << "#{n} string,\n"
    }
    sql = sql[0..sql.size - 2]
    sql << "\n);\n"
    b = fieldlst.uniq.sort
    pp b
    File.open("/tmp/thmreadtable.txt", 'w') {|n|
      b.each {|j|
        n.puts(j)
      }
    }
    puts "\e[4;36mCreate table:\e[0m\ \n #{sql}"
  end
  
end

class NilClass

  def strip
    # Slightly naughty as makeurl hits a bug.
=begin
exception when looping over each packet loop: #<NoMethodError: undefined method `strip' for nil:NilClass>
./thm-httpseries:120:in `block in makeurl': undefined method `strip' for nil:NilClass (NoMethodError)
	from ./thm-httpseries:118:in `each_line'
	from ./thm-httpseries:118:in `makeurl'
	from ./thm-httpseries:189:in `block in <main>'
	from /usr/lib/ruby/gems/2.1.0/gems/pcap-0.7.7/lib/pcaplet.rb:94:in `loop'
	from /usr/lib/ruby/gems/2.1.0/gems/pcap-0.7.7/lib/pcaplet.rb:94:in `each_packet'
	from ./thm-httpseries:178:in `<main>'
=end
  end
  
end

ARGV[0] = "--help" if ARGV[0] == nil

banner = "\e[1;34mWelcome to Threatmonitor HTTP Traffic Visualizer \e[0m\ \n"
banner << "\e[1;34m=================================================\e[0m\ \n\n"

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--countheaders', '-c', GetoptLong::NO_ARGUMENT ],
  [ '--interface', '-i', GetoptLong::REQUIRED_ARGUMENT]
)

opts.each do |opt, arg|
  case opt
    when '--help'
      helper = %q[
-h, --help:
   show help
   
-c, --countheaders - Count HTTP Header types ( Builds a create table statement )[ NO_ARGUMENT ]

-i, --interface -- Network Interface to collect measurements from [ REQUIRED_ARGUMENT ]

]
      puts banner
      puts helper
      exit
    when '--countheaders'
      @countheaders = true
      @k = Keycounter.new
      @f = 0
      puts "Counters Enabled"
    when '--interface'
      @interface = arg
  end
end

puts banner

def text_highlighter(text)
  keys = ["Linux", "Java", "Android", "iPhone", "Mobile", "Chrome", 
          "Safari", "Mozilla", "Gecko", "AppleWebKit", "Windows", 
          "MSIE", "Win64", "Trident", "wispr", "PHPSESSID", "JSESSIONID",
          "AMD64", "Darwin", "Macintosh", "Mac OS X", "Dalvik"]
  cpicker = [2,3,4,1,7,5,6]
  keys.each {|n|
    text.gsub!("#{n}", "\e[4;3#{cpicker[rand(cpicker.size)]}m#{n}\e[0m\ \e[0;32m".strip)
  }
  return text
end

def log_errors(file, data)
  File.open("#{file}", 'a') {|n|
    n.puts("#{data}")
  }
end

# Check if a request isn't just a GET line without headers
# Not sure if this is valid HTTP
def request_valid?(data)
  ln = 0
  data.each_line {|l|
    ln += 1
  }
  if ln > 1
    return true
  else
    puts "\e[1;31mCatch GET's without header information \e[0m\ "
    return false # Due to single GET Requests to no headers 
  end
end

def makeurl(data)
  if !request_valid?(data)
    return false
  end
  hdrs = data
  hostn, requestn = ""
  hdrs.each_line {|n|
    if n.split(":")[0] == "Host"
      hostn = n.split(":")[1].strip
    elsif n.split(" ")[0] == "GET"
      requestn = n.split(" ")[1]
    end
  }
  puts "\e[1;37mURL: http://#{hostn}#{requestn} \e[0m\ "
end

def request_filter(data, keysamples=2000)
  if !request_valid?(data)
    return false
  end
  lkey, rkey = ""
  t = 0
  sql = "INSERT INTO http_request (guid,"
  cols, vals = String.new, String.new
  guid = Guid.new
  vals = "'#{guid}',"
  data.each_line {|n|
    unless n.strip == ""
      if t > 0 # Don't processes GET / POST Line
        lkey = n.split(":")[0].downcase.gsub("-", "").to_s.strip
        #puts "LKEY: #{lkey}"
        if lkey == "cookie"
          rkeyenc = "cookieommited"
        else
          rkey = n.split(":")[1].to_s.gsub(",", "").gsub(";", "").gsub("=", "").strip
          rkeyenc = URI.encode(rkey)
        end
        if ((rkey.strip != "" or lkey.strip != "") and (lkey.strip != "range"))
          cols << "#{lkey},"
          vals << "'#{rkey}',"
        end
        # Keycounter / HTTP Headers counter
        if @countheaders == true
          # Keysamples: For Headers counter number of output lines to sample before exit.
          if @f < keysamples
            if lkey != ""
              @k.keycount("#{lkey}")
              @f = @f + 1
              puts "Sample ##{@f} of##{keysamples}" 
            end
          else
            pp @k.keycount_compile
            @k.keycount_createtablethm
            puts "Real exit..."
            exit
          end
        end
      end
      t = t + 1
    end
  }
  # SQL for Datastore
  begin
    cols = "#{cols[0..cols.size - 2]}) "
    vals = "#{vals[0..vals.size - 2]});"
    sql = "#{sql}#{cols}VALUES (#{vals}"
    return sql
  rescue => e
    pp e
  end
end

def geoiplookup(ip)
  query = "SELECT continent_name, country_name FROM geoipdata_ipv4blocks_country a JOIN geoipdata_locations_country b ON (a.geoname_id = b.geoname_id) WHERE network LIKE '#{ip.split(".")[0]}.#{ip.split(".")[1]}.%' GROUP BY b.continent_name, b.country_name LIMIT 1;"
  resusrcnt = @sessobj.query("#{query}")
  while row = resusrcnt.fetch_hash do
    continent_name = row["continent_name"].to_s
    country_name = row["country_name"].to_s
    #if continent_name == ""
      cname = "(#{country_name})"
    #else
    #  cname = "(#{continent_name})"
    #end
  end
 # geoipcount(
  return cname
end

# Connect to Datastore
@sessobj = Thm::Producer.new
@sessobj.datastore = DATASTORE
@sessobj.debug = false
@sessobj.autocommit = true
@sessobj.dbhost = DBHOST
@sessobj.dbuser = DBUSER
@sessobj.dbpass = DBPASS
@sessobj.dbname = DBNAME
@sessobj.dbconnect

# Regexp strings first currently excludes POST Data
HTTP_METHODS_REGEXP = %r=^GET |^HEAD |^PUT |^TRACE |^CONNECT |^OPTIONS |^DELETE |^PROPFIND |^PROPPATCH |^MKCOL |^COPY |^MOVE |^LOCK |^UNLOCK =
HTTP_METHODS_REGEXP_RESPONSE = %r=^(HTTP\/.*)$=
httpdump = Pcaplet.new("-s 1500 -n -i #{@interface}")
HTTP_REQUEST  = Pcap::Filter.new('tcp dst port 80', httpdump.capture)
HTTP_RESPONSE = Pcap::Filter.new('tcp src portrange 1024-65535', httpdump.capture)
httpdump.add_filter(HTTP_REQUEST | HTTP_RESPONSE)
httpdump.each_packet {|pkt|
  begin
    data = pkt.tcp_data.to_s
    data_highlight = text_highlighter(data)
    case pkt
    when HTTP_REQUEST
      if data =~ HTTP_METHODS_REGEXP
        path = $1
        host = pkt.dst.to_s
        host << ":\e[1;33m#{pkt.dport}\e[0m\ "
        s = "\e[1;33m#{pkt.src}:\e[1;31m#{pkt.sport}\e[0m\ > GET \e[1;33mhttp://#{host}\e[1;32mHTTP/1.1\e[0m ".gsub("GET", "\e[1;36mGET\e[0m")
        geo = geoiplookup(host.split(":")[0])
        puts "\e[4;36mGeo Location:\e[0m\ \n\e[0;35m#{geo} \e[0m\ "
        puts "\e[4;36mRequest Data:\e[0m\ \n\e[0;32m#{data_highlight} \e[0m\ "
        makeurl(data)
        # Process data and prepare then send elsewhere
        query_return_sql = request_filter(data)
        # Store data into InfluxDB API Capture if @mtable exists else Datastore
        begin
          ires = @sessobj.query("#{query_return_sql}")
          puts "\e[4;36mStructured Query:\e[0m\ #{query_return_sql} \e[4;36mResult:\e[0m\ #{ires}"
        rescue
          log_errors("/tmp/thm-sql-errors.log", "SQL Error - #{query_return_sql}") # Catch them all
        end
      end
    when HTTP_RESPONSE
      if data =~ HTTP_METHODS_REGEXP_RESPONSE
        status = $1
        s = "#{pkt.dst}:#{pkt.dport} < #{status}"
        puts "\e[1;31mResponse Data: #{data_highlight} \e[0m\ "
      end
    end
  rescue => e
    puts e
  end
  puts s if s
}
